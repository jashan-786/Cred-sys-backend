spring.application.name=userms
spring.datasource.url=jdbc:postgresql://localhost:5430/credUserDb
spring.datasource.username=jp_user
spring.datasource.password=123
spring.jpa.hibernate.ddl-auto=update
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect


eureka.client.service-url.defaultZone=http://localhost:8761/eureka/
eureka.client.fetch-registry=true
eureka.client.register-with-eureka=true


#zipkin

management.tracing.sampling.probability=1.0


resilience4j.circuitbreaker.instances.propertyBreaker.register-health-indicator=true
resilience4j.circuitbreaker.instances.propertyBreaker.sliding-window-type=count_based
resilience4j.circuitbreaker.instances.propertyBreaker.failure-rate-threshold=50
resilience4j.circuitbreaker.instances.propertyBreaker.automatic-transition-from-open-to-half-open-enabled=true
resilience4j.circuitbreaker.instances.propertyBreaker.permitted-number-of-calls-in-half-open-state=3
resilience4j.circuitbreaker.instances.propertyBreaker.minimum-number-of-calls=5
resilience4j.circuitbreaker.instances.propertyBreaker.sliding-window-size=10



#retry + falback mechanism
resilience4j.retry.instances.propertyBreaker.max-attempts=5
resilience4j.retry.instances.propertyBreaker.wait-duration=2s



#rate limiter
#menas more call immediately reject if give 5 sec than user can retry after 5 sec
#simulate the secum with jMEtere
#aaluzing
resilience4j.ratelimiter.instances.propertyBreaker.timeout-duration=0

#rate limiter will allow every 2 calls in 4 secs
resilience4j.ratelimiter.instances.propertyBreaker.limit-refresh-period=4
resilience4j.ratelimiter.instances.propertyBreaker.limit-for-period=2


management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include=health
management.endpoint.health.show-details=always


#rabbitmq
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest

